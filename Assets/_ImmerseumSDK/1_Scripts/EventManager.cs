using UnityEngine;
using System.Collections;

namespace Immerseum {
    namespace VRSimulator {
        /// <summary>$$Singleton$$ that is used to coordinate all events generated by the <strong>VRSimulator</strong>.</summary>
        public class EventManager : MonoBehaviour {

            public delegate void disableVRSimulatorAction();
            /// <summary>Fired when the VRSimulator is to bedisabled.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnDisableVRSimulator += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnDisableVRSimulator -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event disableVRSimulatorAction OnDisableVRSimulator;
            /// <summary>Fires the <strong><see cref="OnDisableVRSimulator">OnDisableVRSimulator</see></strong> event.</summary>
            public static void disableVRSimulator() {
                if (OnDisableVRSimulator != null) {
                    OnDisableVRSimulator();
                }
            }


            public delegate void InitializeHMDSimulatorAction();
            /// <summary>Fired during the VRSimulator's initialization.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInitializeHMDSimulator += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInitializeHMDSimulator -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InitializeHMDSimulatorAction OnInitializeHMDSimulator;
            /// <summary>Fires the <strong><see cref="OnInitializeHMDSimulator">OnInitializeHMDSimulator</see></strong> event.</summary>
            public static void initializeHMDSimulator() {
                if (OnInitializeHMDSimulator != null) {
                    OnInitializeHMDSimulator();
                }
            }

            public delegate void InitializeCameraRigAction();
            /// <summary>Fired during the VRSimulator's initialization.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInitializeCameraRig += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInitializeCameraRig -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InitializeCameraRigAction OnInitializeCameraRig;
            /// <summary>Fires the <strong><see cref="OnInitializeCameraRig">OnInitializeCameraRig</see></strong> event.</summary>
            public static void initializeCameraRig() {
                if (OnInitializeCameraRig != null) {
                    OnInitializeCameraRig();
                }
            }

            public delegate void InitializeCameraRigEndAction();
            /// <summary>Fired when the VRSimulator's camera initialization has completed.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInitializeCameraRigEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInitializeCameraRigEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InitializeCameraRigEndAction OnInitializeCameraRigEnd;
            /// <summary>
            /// Fires the <strong><see cref="OnInitializeCameraRigEnd">OnInitializeCameraRigEnd</see></strong> event.
            /// </summary>
            public static void endInitializeCameraRig() {
                if (OnInitializeCameraRigEnd != null) {
                    OnInitializeCameraRigEnd();
                }
            }

            public delegate void InitializePlayAreaAction();
            /// <summary>Fired during the VRSimulator's initialization.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInitializePlayArea += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInitializePlayArea -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InitializePlayAreaAction OnInitializePlayArea;
            /// <summary>Fires the <strong><see cref="OnInitializePlayArea">OnInitializePlayArea</see></strong> event.</summary>
            public static void initializePlayArea() {
                if (OnInitializePlayArea != null) {
                    OnInitializePlayArea();
                }
            }

            public delegate void InitializePlayAreaEndAction();
            /// <summary>Fired when initialization of the Play Area has been completed.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInitializePlayAreaEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInitializePlayAreaEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InitializePlayAreaEndAction OnInitializePlayAreaEnd;
            /// <summary>Fires the <strong><see cref="OnInitializePlayAreaEnd">OnInitializePlayAreaEnd</see></strong> event.</summary>
            public static void endInitializePlayArea() {
                if (OnInitializePlayAreaEnd != null) {
                    OnInitializePlayAreaEnd();
                }
            }

            public delegate void InitializeControllersAction();
            /// <summary>Fired during the VRSimulator's initialization.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInitializeControllers += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInitializeControllers -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InitializeControllersAction OnInitializeControllers;
            /// <summary>Fires the <strong><see cref="OnInitializeControllers">OnInitializeControllers</see></strong> event.</summary>
            public static void initializeControllers() {
                if (OnInitializeControllers != null) {
                    OnInitializeControllers();
                }
            }

            public delegate void InitializeControllersEndAction();
            /// <summary>Fired during the VRSimulator's initialization.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInitializeControllersEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInitializeControllersEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InitializeControllersEndAction OnInitializeControllersEnd;
            /// <summary>Fires the <strong><see cref="OnInitializeControllersEnd">OnInitializeControllersEnd</see></strong> event.</summary>
            public static void endInitializeControllers() {
                if (OnInitializeControllersEnd != null) {
                    OnInitializeControllersEnd();
                }
            }


            public delegate void InstantiateControllerAction(int controller, bool removeCollider = false);
            /// <summary>Fired during initialization to instantiate a single specific simulated controller.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInstantiateController += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInstantiateController -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller, bool removeCollider) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InstantiateControllerAction OnInstantiateController;
            /// <summary>
            ///   <para>Fires the <strong>OnInstantiateController</strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller to instantiate. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            /// <param name="removeCollider">If <strong>true</strong>, removes the Collider from the simulated controller after instantiation. If <strong>false</strong>, leaves the Collider and applies
            /// properties as per the <strong><see cref="ControllerManager">ControllerManager</see></strong>'s settings.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Instantiates both simulated controllers, applying a collider based on
            /// // ControllerManager properties.
            /// EventManager.instantiateController(0, !ControllerManager.applyCollider);
            /// EventManager.instantiateController(1, !ControllerManager.applyCollider);</code>
            /// </example>
            public static void instantiateController(int controller, bool removeCollider = false) {
                if (OnInstantiateController != null) {
                    OnInstantiateController(controller, removeCollider);
                }
            }

            public delegate void InstantiateControllerEndAction(int controller, bool removeCollider = false);
            /// <summary>Fired when a single, specific simulated controller has been fully instantiated.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInstantiateControllerEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInstantiateControllerEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller, bool removeCollider) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InstantiateControllerEndAction OnInstantiateControllerEnd;
            /// <summary>
            ///   <para>Fires the <strong>OnInstantiateControllerEnd</strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller being instantiated. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            /// <param name="removeCollider">If <strong>true</strong>, removes the Collider from the simulated controller after instantiation. If <strong>false</strong>, leaves the Collider and applies
            /// properties as per the <strong><see cref="ControllerManager">ControllerManager</see></strong>'s settings.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Ends the instantation process for both simulated controllers, applying a collider based on
            /// // ControllerManager properties.
            /// EventManager.endInstantiateController(0, !ControllerManager.applyCollider);
            /// EventManager.endInstantiateController(1, !ControllerManager.applyCollider);</code>
            /// </example>
            public static void endInstantiateController(int controller, bool removeCollider = false) {
                if (OnInstantiateControllerEnd != null) {
                    OnInstantiateControllerEnd(controller, removeCollider);
                }
            }

            public delegate void ApplyColliderAction(int controller, bool removeCollider = false);
            /// <summary>
            ///   <para>Fired during the instantiation of a simulated controller. During this event, <see cref="!:https://docs.unity3d.com/ScriptReference/Collider.html">colliders</see> are applied to a specific simulated controller based on the configuration settings in the
            /// <strong><see cref="ControllerManager">ControllerManager</see></strong>.</para>
            /// </summary>
            /// <seealso cref="M:Immerseum.VRSimulator.EventManager.applyCollider(System.Int32,System.Boolean)">Event Invocation: EventManager.applyCollider</seealso>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnApplyCollider += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnApplyCollider -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller, bool removeCollider) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event ApplyColliderAction OnApplyCollider;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnApplyCollider">OnApplyCollider</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller to instantiate. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            /// <param name="removeCollider">If <strong>true</strong>, removes the Collider from the simulated controller after instantiation. If <strong>false</strong>, leaves the Collider and applies
            /// properties as per the <strong><see cref="ControllerManager">ControllerManager</see></strong>'s settings.</param>
            public static void applyCollider(int controller, bool removeCollider = false) {
                if (OnApplyCollider != null) {
                    OnApplyCollider(controller, removeCollider);
                }
            }

            public delegate void ApplyColliderEndAction(int controller, bool removeCollider = false);
            /// <summary>Fired at the conclusion of the <strong><see cref="OnApplyCollider" /></strong> event, when a <see cref="!:https://docs.unity3d.com/ScriptReference/Collider.html">collider</see> has been applied/removed from a simulated controller.</summary>
            /// <seealso cref="M:Immerseum.VRSimulator.EventManager.endApplyCollider(System.Int32,System.Boolean)">Event Invocation: EventManager.endApplyCollider</seealso>
            /// <seealso cref="OnApplyCollider">OnApplyCollider</seealso>
            /// <example>
            ///   <code title="Sample Listener" description="A sample listener for the OnApplyColliderEnd event." lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnApplyColliderEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnApplyColliderEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller, bool removeCollider) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event ApplyColliderEndAction OnApplyColliderEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnApplyColliderEnd">OnApplyColliderEnd</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller to instantiate. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            /// <param name="removeCollider">If <strong>true</strong>, removes the Collider from the simulated controller after instantiation. If <strong>false</strong>, leaves the Collider and applies
            /// properties as per the <strong><see cref="ControllerManager">ControllerManager</see></strong>'s settings.</param>
            public static void endApplyCollider(int controller, bool removeCollider = false) {
                if (OnApplyColliderEnd != null) {
                    OnApplyColliderEnd(controller, removeCollider);
                }
            }

            public delegate void ApplyRigidbodyAction(int controller);
            /// <summary>
            ///   <para>Fired during the instantiation of a simulated controller. During this event, <see cref="//docs.unity3d.com/ScriptReference/Rigidbody.html ">rigidbodies: https</see> are
            /// applied to a specific simulated controller based on the configuration settings in the <strong><see cref="ControllerManager">ControllerManager</see></strong>.</para>
            /// </summary>
            /// <seealso cref="M:Immerseum.VRSimulator.EventManager.applyRigidbody(System.Int32)">Event Invocation: EventManager.applyRigidbody</seealso>
            /// <example>
            ///   <code title="Sample Listener" description="A sample listener for the OnApplyRigidbody event." lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnApplyRigidbody += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnApplyRigidbody -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event ApplyRigidbodyAction OnApplyRigidbody;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnApplyRigidbody">OnApplyRigidbody</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller to instantiate. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            public static void applyRigidbody(int controller) {
                if (OnApplyRigidbody != null) {
                    OnApplyRigidbody(controller);
                }
            }

            public delegate void ApplyRigidbodyEndAction(int controller);
            /// <summary>Fired at the conclusion of the <strong><see cref="OnApplyRigidbody" /></strong> event, when a %rigidbody: <see cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.html%" /> has been applied/removed from a
            /// simulated controller.</summary>
            /// <seealso cref="OnApplyRigidbody">OnApplyRigidbody</seealso>
            /// <seealso cref="M:Immerseum.VRSimulator.EventManager.endApplyRigidbody(System.Int32)">Event Invocation: EventManager.endApplyRigidbody</seealso>
            /// <example>
            ///   <code title="Sample Listener" description="A sample listener for the OnApplyRigidbodyEnd event." lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnApplyRigidbodyEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnApplyRigidbodyEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event ApplyRigidbodyEndAction OnApplyRigidbodyEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnApplyRigidbodyEnd">OnApplyRigidbodyEnd</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller being instantiated. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            public static void endApplyRigidbody(int controller) {
                if (OnApplyRigidbodyEnd != null) {
                    OnApplyRigidbodyEnd(controller);
                }
            }

            public delegate void PositionControllerAction(int controller, ControllerPositions targetPosition);
            /// <summary>Fired during initialization of the VRSimulator.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnPositionController += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnPositionController -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller, ControllerPositions targetPosition) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event PositionControllerAction OnPositionController;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnPositionControllerStart">OnPositionControllerStart</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller being positioned. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            /// <param name="targetPosition">The position to which the simulated controller should be moved, expressed as a <strong><see cref="ControllerPositions">ControllerPositions</see></strong>.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Fires the OnPositionControllerStart event, positioning the left-hand controller 
            /// // to the Reaching position.
            /// EventManager.moveController(0, ControllerPositions.Reaching);</code>
            /// </example>
            public static void positionController(int controller, ControllerPositions targetPosition) {
                if (OnPositionController != null) {
                    OnPositionController(controller, targetPosition);
                }
            }

            public delegate void PositionControllerEndAction(int controller, ControllerPositions targetPosition);
            /// <summary>Fired during initialization of the VRSimulator, when the <strong><see cref="OnPositionController">OnPositionController</see></strong>'s primary listener has finished.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnPositionControllerEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnPositionControllerEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller, ControllerPositions targetPosition) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event PositionControllerEndAction OnPositionControllerEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnPositionControllerEnd">OnPositionControllerEnd</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller being positioned. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            /// <param name="targetPosition">The position to which the simulated controller should be moved, expressed as a <strong><see cref="ControllerPositions">ControllerPositions</see></strong>.</param>
            public static void endPositionController(int controller, ControllerPositions targetPosition) {
                if (OnPositionControllerEnd != null) {
                    OnPositionControllerEnd(controller, targetPosition);
                }
            }

            public delegate void MoveControllerPositionAction(int controller, ControllerPositions targetOffset);
            public delegate void MoveControllerPositionAction_Vector(int controller, Vector3 targetPosition, Quaternion targetRotation, bool relativeToOrigin);
            /// <summary>
            ///   <para>Fired when a controller is initiating a move. This event is typically invoked by either:</para>
            ///   <list type="bullet">
            ///     <item>
            ///       <see cref="O:Immerseum.VRSimulator.ControllerManager.moveController">ControllerManager.moveController</see>, or;</item>
            ///     <item>
            ///       <see cref="O:Immerseum.VRSimulator.EventManager.moveController">EventManager.moveController</see>
            ///     </item>
            ///   </list>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnMoveControllerStart += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnMoveControllerStart -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller, ControllerPositions targetPosition) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event MoveControllerPositionAction OnMoveControllerStart;
            /// <summary>
            ///   <para>Fired when a controller is initiating a move to a specific set of coordinates. This event is typically invoked by  either:</para>
            ///   <list type="bullet">
            ///     <item>
            ///       <see cref="O:Immerseum.VRSimulator.ControllerManager.moveController">ControllerManager.moveController</see>, or;</item>
            ///     <item>
            ///       <see cref="O:Immerseum.VRSimulator.EventManager.moveController">EventManager.moveController</see>
            ///     </item>
            ///   </list>
            ///   <para>.</para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnMoveControllerStart_Vector += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnMoveControllerStart_Vector -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller, Vector3 targetOffset, Quaternion targetRotation, bool relativeToOrigin) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event MoveControllerPositionAction_Vector OnMoveControllerStart_Vector;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnMoveControllerStart">OnMoveControllerStart</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller being moved. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            /// <param name="targetPosition">The position to which the simulated controller should be moved, expressed as a <strong><see cref="ControllerPositions">ControllerPositions</see></strong>.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Fires the OnMoveControllerStart event, moving the left-hand controller 
            /// // to the origin position.
            /// EventManager.moveController(0, ControllerPositions.Origin);</code>
            /// </example>
            public static void moveController(int controller, ControllerPositions targetPosition) {
                if (OnMoveControllerStart != null) {
                    OnMoveControllerStart(controller, targetPosition);
                }
            }
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnMoveControllerStart_Vector">OnMoveControllerStart_Vector</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller being moved. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for the
            /// right-hand controller.</param>
            /// <param name="targetOffset">The coordinates by which the controller's position should be offset/adjusted, expressed as a <see cref="!:https://docs.unity3d.com/ScriptReference/Vector3.html">Vector3</see>.</param>
            /// <param name="targetRotation">The rotation that the controller should have when the move has been completed, expressed as a <see cref="!:https://docs.unity3d.com/ScriptReference/Quaternion.html">Quaternion</see>.</param>
            /// <param name="relativeToOrigin">If true, moves the controller to the <strong>targetOffset</strong> relative to the origin point at (0, 0, 0) in local space.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Fires the OnMoveControllerStart_Vector event, moving the left-hand controller 
            /// // forward by 0.5 and upward by 0.25.
            /// EventManager.moveController(0, new Vector3(0f, 0.5f, 0.25f), HMDSimulator.leftController.rotation, false);</code>
            /// </example>
            public static void moveController(int controller, Vector3 targetOffset, Quaternion targetRotation, bool relativeToOrigin = true) {
                if (OnMoveControllerStart_Vector != null) {
                    OnMoveControllerStart_Vector(controller, targetOffset, targetRotation, relativeToOrigin);
                }
            }

            public delegate void MoveControllerPositionEndAction(int controller);
            /// <summary>Fired when a controller has completed its movement operation.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnMoveControllerEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnMoveControllerEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(int controller) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event MoveControllerPositionEndAction OnMoveControllerEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnMoveControllerEnd">OnMoveControllerEnd</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="controller">Integer which identifies which simulated controller has been moved. Accepts <strong>0</strong> for the left-hand controller, and <strong>1</strong> for
            /// the right-hand controller.</param>
            public static void endMoveController(int controller) {
                if (OnMoveControllerEnd != null) {
                    OnMoveControllerEnd(controller);
                }
            }

            public delegate void MoveAvatarStartAction ();
            /// <summary>Fired when the user's Avatar actually begins to move in response to user input.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnMoveAvatarStart += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnMoveAvatarStart -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event MoveAvatarStartAction OnMoveAvatarStart;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnMoveAvatarStart">OnMoveAvatarStart</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            public static void startMoveAvatar() {
                if (OnMoveAvatarStart != null) {
                    OnMoveAvatarStart();
                }
            }

            public delegate void MoveAvatarEndAction ();
            /// <summary>Fired when the user's Avatar actually ends its movement to move in response to user input.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnMoveAvatarEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnMoveAvatarEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event MoveAvatarEndAction OnMoveAvatarEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnMoveAvatarEnd">OnMoveAvatarEnd</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            public static void endMoveAvatar () {
                if (OnMoveAvatarEnd != null) {
                    OnMoveAvatarEnd();
                }
            }

            public delegate void InitializeInputActionsStartAction();
            /// <summary>Fired during initialization of the VRSimulator.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInitializeInputActions += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInitializeInputActions -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InitializeInputActionsStartAction OnInitializeInputActions;
            /// <summary>Fires the <strong><see cref="OnInitializeInputActions">OnInitializeInputActions</see></strong> event.</summary>
            public static void initializeInputActions() {
                if (OnInitializeInputActions != null) {
                    OnInitializeInputActions();
                }
            }

            public delegate void InitializeInputActionsEndAction();
            /// <summary>Fired when default <see cref="InputActions" /> have been created and registered, provided that default <see cref="InputActions" /> are enabled</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInitializeInputActionsEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInitializeInputActionsEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InitializeInputActionsEndAction OnInitializeInputActionsEnd;
            /// <summary>Fires the <strong><see cref="OnInitializeInputActionsEnd">OnInitializeInputActionsEnd</see></strong> event.</summary>
            public static void endInitializeInputActions() {
                if (OnInitializeInputActionsEnd != null) {
                    OnInitializeInputActionsEnd();
                }
            }

            public delegate void InputStartAction(InputAction inputAction);
            /// <summary>Fired by the <strong><see cref="InputActionManager" /></strong> when an <strong><see cref="InputAction" /></strong> has been detected.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInputActionStart += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInputActionStart -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InputStartAction OnInputActionStart;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnInputActionStart">OnInputActionStart</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that is to be started.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Fires the OnInputActionStart event for the togglePauseMenuButton InputAction.
            /// EventManager.startInputAction(togglePauseMenuButton);</code>
            /// </example>
            public static void startInputAction(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Input Action Received: " + inputAction.name);
                }
                if (OnInputActionStart != null) {
                    OnInputActionStart(inputAction);
                }
            }

            public delegate void InputEndAction(InputAction inputAction);
            /// <summary>
            ///   <para>Fired when an <see cref="InputAction">InputAction</see>'s processing has completed, at the conclusion of the primary listener that handles <see cref="OnInputActionStart" />.</para>
            ///   <innovasys:widget type="Tip Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>If you have many separate listeners all listening for a particular OnInputActionStart, it may be easy to lose track of which listener should
            ///         invoke <strong><see cref="endInputAction">EventManager.endInputAction</see></strong>.</para>
            ///       <para>As a general rule of thumb, this event should be invoked by the "main" method that deals with the InputAction. "Main" in your case may be
            ///         the method that does the most, or the method takes the longest, or the method that deals directly with the user's avatar.</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnInputActionEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnInputActionEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event InputEndAction OnInputActionEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnInputActionEnd">OnInputActionEnd</see></strong> event.</para>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that has ended.</param>
            public static void endInputAction(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Ending Input Action: " + inputAction.name);
                }
                if (OnInputActionEnd != null) {
                    OnInputActionEnd(inputAction);
                }
            }

            public delegate void PrimaryTriggerActivation(InputAction inputAction);
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>togglePrimaryTrigger</strong><see cref="InputAction" /> has been received and
            /// <strong>MovementManager.isPrimaryTriggerInUse</strong> is <strong>false</strong>.</para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnPrimaryTriggerActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnPrimaryTriggerActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event PrimaryTriggerActivation OnPrimaryTriggerActivation;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnPrimaryTriggerActivation">OnPrimaryTriggerActivation</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <param name="inputAction">The <strong><see cref="InputAction">InputAction</see></strong> where the primary trigger's activation was captured.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Activates the primary trigger with the togglePrimaryTrigger InputAction.
            /// EventManager.activatePrimaryTrigger(togglePrimaryTrigger);</code>
            /// </example>
            public static void activatePrimaryTrigger(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Primary Trigger: ACTIVATED");
                }
                if (OnPrimaryTriggerActivation != null) {
                    OnPrimaryTriggerActivation(inputAction);
                }
            }

            public delegate void PrimaryTriggerDeactivation(InputAction inputAction);
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>togglePrimaryTrigger</strong><see cref="InputAction" /> has been received and
            /// <strong>MovementManager.isPrimaryTriggerInUse</strong> is <strong>true</strong>.</para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnPrimaryTriggerDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnPrimaryTriggerDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event PrimaryTriggerDeactivation OnPrimaryTriggerDeactivation;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnPrimaryTriggerDeactivation">OnPrimaryTriggerDeactivation</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <param name="inputAction">The <strong><see cref="InputAction">InputAction</see></strong> where the primary trigger's activation was captured.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Deactivates the primary trigger using the togglePrimaryTrigger InputAction.
            /// EventManager.deactivatePrimaryTrigger(togglePrimaryTrigger);</code>
            /// </example>
            public static void deactivatePrimaryTrigger(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Primary Trigger: DEACTIVATED");
                }
                if (OnPrimaryTriggerDeactivation != null) {
                    OnPrimaryTriggerDeactivation(inputAction);
                }
            }

            public delegate void SecondaryTriggerActivation(InputAction inputAction);
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleSecondaryTrigger</strong><see cref="InputAction" /> has been received and
            /// <strong>MovementManager.isSecondaryTriggerInUse</strong> is <strong>false</strong>.</para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnSecondaryTriggerActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnSecondaryTriggerActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event SecondaryTriggerActivation OnSecondaryTriggerActivation;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnPrimaryTriggerActivation">OnPrimaryTriggerActivation</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <param name="inputAction">The <strong><see cref="InputAction">InputAction</see></strong> where the secondary trigger's activation was captured.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Activates the secondary trigger with the toggleSecondaryTrigger InputAction.
            /// EventManager.activateSecondaryTrigger(toggleSecondaryTrigger);</code>
            /// </example>
            public static void activateSecondaryTrigger(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Secondary Trigger: ACTIVATED");
                }
                if (OnSecondaryTriggerActivation != null) {
                    OnSecondaryTriggerActivation(inputAction);
                }
            }

            public delegate void SecondaryTriggerDeactivation(InputAction inputAction);
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleSecondaryTrigger</strong><see cref="InputAction" /> has been received and
            /// <strong>MovementManager.isSecondaryTriggerInUse</strong> is <strong>true</strong>.</para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnSecondaryTriggerDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnSecondaryTriggerDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event SecondaryTriggerDeactivation OnSecondaryTriggerDeactivation;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnPrimaryTriggerDeactivation">OnPrimaryTriggerDeactivation</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <param name="inputAction">The <strong><see cref="InputAction">InputAction</see></strong> where the secondary trigger's activation was captured.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Deactivates the secondary trigger using the toggleSecondaryTrigger InputAction.
            /// EventManager.deactivateSecondaryTrigger(toggleSecondaryTrigger);</code>
            /// </example>
            public static void deactivateSecondaryTrigger(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Secondary Trigger: DEACTIVATED");
                }
                if (OnSecondaryTriggerDeactivation != null) {
                    OnSecondaryTriggerDeactivation(inputAction);
                }
            }

            public delegate void CancelButtonActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleCancelButton</strong><see cref="InputAction" /> has been received.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>The default <see cref="InputAction" /> configuration used by the VRSimulator assumes that the button is not toggle-able. This means this event will be fired each
            ///         and every time the button is pressed, regardless of whether the button had been pressed before.</para>
            ///       <innovasys:widget type="For More Information" layout="block">
            ///         <innovasys:widgetproperty layout="block" name="Content">
            ///           <list type="bullet">
            ///             <item>
            ///               <see cref="OnCancelButtonDeactivation" />
            ///             </item>
            ///           </list>
            ///         </innovasys:widgetproperty>
            ///       </innovasys:widget>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <seealso cref="M:Immerseum.VRSimulator.EventManager.activateCancelButton">Event Invocation: EventManager.activateCancelButton</seealso>
            /// <example>
            ///   <code title="Sample Listener" description="An example listener for the OnCancelButtonActivation event." lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnCancelButtonActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnCancelButtonActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event CancelButtonActivation OnCancelButtonActivation;
            /// <summary>Fires the <strong><see cref="OnCancelButtonActivation">OnCancelButtonActivation</see></strong> event.</summary>
            public static void activateCancelButton() {
                InputActionManager.setCancelButtonActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Cancel Button: ACTIVATED");
                }
                if (OnCancelButtonActivation != null) {
                    OnCancelButtonActivation();
                }
            }

            public delegate void LeftBumperActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleLeftBumper</strong><see cref="InputAction" /> has been received.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>The default <see cref="InputAction" /> configuration used by the VRSimulator assumes that the button is not toggle-able. This means this event will be fired each
            ///         and every time the button is pressed, regardless of whether the button had been pressed before.</para>
            ///       <innovasys:widget type="For More Information" layout="block">
            ///         <innovasys:widgetproperty layout="block" name="Content">
            ///           <list type="bullet">
            ///             <item>
            ///               <see cref="OnLeftBumperDeactivation" />
            ///             </item>
            ///           </list>
            ///         </innovasys:widgetproperty>
            ///       </innovasys:widget>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnLeftBumperActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnLeftBumperActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event LeftBumperActivation OnLeftBumperActivation;
            /// <summary>Fires the <strong><see cref="OnLeftBumperActivation">OnLeftBumperActivation</see></strong> event.</summary>
            public static void activateLeftBumper() {
                InputActionManager.setLeftBumperActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Left Bumper: ACTIVATED");
                }
                if (OnLeftBumperActivation != null) {
                    OnLeftBumperActivation();
                }
            }

            public delegate void RightBumperActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleLeftBumper</strong><see cref="InputAction" /> has been received.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>The default <see cref="InputAction" /> configuration used by the VRSimulator assumes that the button is not toggle-able. This means this event will be fired each
            ///         and every time the button is pressed, regardless of whether the button had been pressed before.</para>
            ///       <innovasys:widget type="For More Information" layout="block">
            ///         <innovasys:widgetproperty layout="block" name="Content">
            ///           <list type="bullet">
            ///             <item>
            ///               <see cref="OnRightBumperDeactivation" />
            ///             </item>
            ///           </list>
            ///         </innovasys:widgetproperty>
            ///       </innovasys:widget>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnRightBumperActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnRightBumperActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event RightBumperActivation OnRightBumperActivation;
            /// <summary>Fires the <strong><see cref="OnRightBumperActivation">OnRightBumperActivation</see></strong> event.</summary>
            public static void activateRightBumper() {
                InputActionManager.setRightBumperActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Right Bumper: ACTIVATED");
                }
                if (OnRightBumperActivation != null) {
                    OnRightBumperActivation();
                }
            }

            public delegate void LeftThumbstickClickActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleLeftThumbstickClick</strong><see cref="InputAction" /> has been received and
            /// <strong>InputActionManager.isLeftThumbstickClickActivated</strong> is <strong>false</strong>.</para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnLeftThumbstickClickActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnLeftThumbstickClickActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event LeftThumbstickClickActivation OnLeftThumbstickClickActivation;
            /// <summary>Fires the <strong><see cref="OnLeftThumbstickClickActivation">OnLeftThumbstickClickActivation</see></strong> event.</summary>
            public static void activateLeftThumbstickClick() {
                InputActionManager.setLeftThumbstickClickActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Left Thumbstick Click: ACTIVATED");
                }
                if (OnLeftThumbstickClickActivation != null) {
                    OnLeftThumbstickClickActivation();
                }
            }

            public delegate void RightThumbstickClickActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleRightThumbstickClick</strong><see cref="InputAction" /> has been received and
            /// <strong>InputActionManager.isRightThumbstickClickActivated</strong> is <strong>false</strong>.</para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnRightThumbstickClickActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnRightThumbstickClickActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event RightThumbstickClickActivation OnRightThumbstickClickActivation;
            /// <summary>Fires the <strong><see cref="OnRightThumbstickClickActivation">OnRightThumbstickClickActivation</see></strong> event.</summary>
            public static void activateRightThumbstickClick() {
                InputActionManager.setRightThumbstickClickActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Right Thumbstick Click: ACTIVATED");
                }
                if (OnRightThumbstickClickActivation != null) {
                    OnRightThumbstickClickActivation();
                }
            }

            public delegate void PauseButtonActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>togglePauseButton</strong><see cref="InputAction" /> has been received.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>The default <see cref="InputAction" /> configuration used by the VRSimulator assumes that the button is not toggle-able. This means this event will be fired each
            ///         and every time the button is pressed, regardless of whether the button had been pressed before.</para>
            ///       <innovasys:widget type="For More Information" layout="block">
            ///         <innovasys:widgetproperty layout="block" name="Content">
            ///           <list type="bullet">
            ///             <item>
            ///               <see cref="OnPauseButtonDeactivation" />
            ///             </item>
            ///           </list>
            ///         </innovasys:widgetproperty>
            ///       </innovasys:widget>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnPauseButtonActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnPauseButtonActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event PauseButtonActivation OnPauseButtonActivation;
            /// <summary>Fires the <strong><see cref="OnPauseButtonActivation">OnPauseButtonActivation</see></strong> event.</summary>
            public static void activatePauseButton() {
                InputActionManager.setPauseButtonActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Pause Button: ACTIVATED");
                }
                if (OnPauseButtonActivation != null) {
                    OnPauseButtonActivation();
                }
            }

            public delegate void SecondaryButtonActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleSecondaryButton</strong><see cref="InputAction" /> has been received.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>The default <see cref="InputAction" /> configuration used by the VRSimulator assumes that the button is not toggle-able. This means this event will be fired each
            ///         and every time the button is pressed, regardless of whether the button had been pressed before.</para>
            ///       <innovasys:widget type="For More Information" layout="block">
            ///         <innovasys:widgetproperty layout="block" name="Content">
            ///           <list type="bullet">
            ///             <item>
            ///               <see cref="OnSecondaryButtonDeactivation" />
            ///             </item>
            ///           </list>
            ///         </innovasys:widgetproperty>
            ///       </innovasys:widget>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnSecondaryButtonActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnSecondaryButtonActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event SecondaryButtonActivation OnSecondaryButtonActivation;
            /// <summary>Fires the <strong><see cref="OnSecondaryButtonActivation">OnSecondaryButtonActivation</see></strong> event.</summary>
            public static void activateSecondaryButton() {
                InputActionManager.setSecondaryButtonActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Secondary Button: ACTIVATED");
                }
                if (OnSecondaryButtonActivation != null) {
                    OnSecondaryButtonActivation();
                }
            }

            public delegate void SelectionButtonActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleSelectionButton</strong><see cref="InputAction" /> has been received.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>The default <see cref="InputAction" /> configuration used by the VRSimulator assumes that the button is not toggle-able. This means this event will be fired each
            ///         and every time the button is pressed, regardless of whether the button had been pressed before.</para>
            ///       <innovasys:widget type="For More Information" layout="block">
            ///         <innovasys:widgetproperty layout="block" name="Content">
            ///           <list type="bullet">
            ///             <item>
            ///               <see cref="OnSelectionButtonDeactivation" />
            ///             </item>
            ///           </list>
            ///         </innovasys:widgetproperty>
            ///       </innovasys:widget>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnSelectionButtonActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnSelectionButtonActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event SelectionButtonActivation OnSelectionButtonActivation;
            /// <summary>Fires the <strong><see cref="OnSelectionButtonActivation">OnSelectionButtonActivation</see></strong> event.</summary>
            public static void activateSelectionButton() {
                InputActionManager.setSelectionButtonActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Selection Button: ACTIVATED");
                }
                if (OnSelectionButtonActivation != null) {
                    OnSelectionButtonActivation();
                }
            }

            public delegate void TertiaryButtonActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleTertiaryButton</strong><see cref="InputAction" /> has been received.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>The default <see cref="InputAction" /> configuration used by the VRSimulator assumes that the button is not toggle-able. This means this event will be fired each
            ///         and every time the button is pressed, regardless of whether the button had been pressed before.</para>
            ///       <innovasys:widget type="For More Information" layout="block">
            ///         <innovasys:widgetproperty layout="block" name="Content">
            ///           <list type="bullet">
            ///             <item>
            ///               <see cref="OnTertiaryButtonDeactivation" />
            ///             </item>
            ///           </list>
            ///         </innovasys:widgetproperty>
            ///       </innovasys:widget>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnTertiaryButtonActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnTertiaryButtonActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event TertiaryButtonActivation OnTertiaryButtonActivation;
            /// <summary>Fires the <strong><see cref="OnTertiaryButtonActivation">OnTertiaryButtonActivation</see></strong> event.</summary>
            public static void activateTertiaryButton() {
                InputActionManager.setTertiaryButtonActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Tertiary Button: ACTIVATED");
                }
                if (OnTertiaryButtonActivation != null) {
                    OnTertiaryButtonActivation();
                }
            }

            public delegate void ViewButtonActivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleViewButton</strong><see cref="InputAction" /> has been received.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>The default <see cref="InputAction" /> configuration used by the VRSimulator assumes that the button is not toggle-able. This means this event will be fired each
            ///         and every time the button is pressed, regardless of whether the button had been pressed before.</para>
            ///       <innovasys:widget type="For More Information" layout="block">
            ///         <innovasys:widgetproperty layout="block" name="Content">
            ///           <list type="bullet">
            ///             <item>
            ///               <see cref="OnViewButtonDeactivation" />
            ///             </item>
            ///           </list>
            ///         </innovasys:widgetproperty>
            ///       </innovasys:widget>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnViewButtonActivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnViewButtonActivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event ViewButtonActivation OnViewButtonActivation;
            /// <summary>Fires the <strong><see cref="OnViewButtonActivation">OnViewButtonActivation</see></strong> event.</summary>
            public static void activateViewButton() {
                InputActionManager.setViewButtonActivated(true);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] View Button: ACTIVATED");
                }
                if (OnViewButtonActivation != null) {
                    OnViewButtonActivation();
                }
            }

            public delegate void PitchRotationStartAction(InputAction inputAction);
            /// <summary>If default <see cref="InputAction">InputActions</see> are enabled, then this event fires whenever the <strong>pitchRotation</strong><see cref="InputAction" /> ceases to be at rest.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnPitchRotationStart += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnPitchRotationStart -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event PitchRotationStartAction OnPitchRotationStart;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnPitchRotationStart" /></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that initiated rotation.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Fires the OnPitchRotationStart event for the pitchRotation InputAction.
            /// EventManager.startPitchRotation(pitchRotation);</code>
            /// </example>
            public static void startPitchRotation(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Pitch Rotation Begun");
                }
                if (OnPitchRotationStart != null) {
                    OnPitchRotationStart(inputAction);
                }
            }

            public delegate void YawRotationStartAction(InputAction inputAction);
            /// <summary>If default <see cref="InputAction">InputActions</see> are enabled, then this event fires whenever the <strong>yawRotation</strong><see cref="InputAction" /> ceases to be at rest.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnYawRotationStart += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnYawRotationStart -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event YawRotationStartAction OnYawRotationStart;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnYawRotationStart" /></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that initiated rotation.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Fires the OnYawRotationStart event for the yawRotation InputAction.
            /// EventManager.startYawRotation(yawRotation);</code>
            /// </example>
            public static void startYawRotation(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Yaw Rotation Begun");
                }
                if (OnYawRotationStart != null) {
                    OnYawRotationStart(inputAction);
                }
            }

            public delegate void XAxisMovementStartAction(InputAction inputAction);
            /// <summary>If default <see cref="InputAction">InputActions</see> are enabled, then this event fires whenever the <strong>xAxisMovement</strong><see cref="InputAction" /> ceases to be at rest.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnXAxisMovementStart += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnXAxisMovementStart -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event XAxisMovementStartAction OnXAxisMovementStart;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnXAxisMovementStart">OnXAxisMovementStart</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that initiated movement along the X-Axis.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Fires the OnXAxisMovementStart event for the xAxisMovement InputAction.
            /// EventManager.startXAxisMovement(xAxisMovement);</code>
            /// </example>
            public static void startXAxisMovement(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] X-Axis Movement Begun");
                }
                if (OnXAxisMovementStart != null) {
                    OnXAxisMovementStart(inputAction);
                }
            }

            public delegate void ZAxisMovementStartAction(InputAction inputAction);
            /// <summary>If default <see cref="InputAction">InputActions</see> are enabled, then this event fires whenever the z<strong>AxisMovement</strong><see cref="InputAction" /> ceases to be at rest.</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnZAxisMovementStart += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnZAxisMovementStart -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event ZAxisMovementStartAction OnZAxisMovementStart;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnXAxisMovementStart">OnZAxisMovementStart</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that initiated movement along the Z-Axis.</param>
            /// <example>
            ///   <code title="Example" description="" lang="C#">
            /// // Fires the OnZAxisMovementStart event for the zAxisMovement InputAction.
            /// EventManager.startZAxisMovement(zAxisMovement);</code>
            /// </example>
            public static void startZAxisMovement(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Z-Axis Movement Begun");
                }
                if (OnZAxisMovementStart != null) {
                    OnZAxisMovementStart(inputAction);
                }
            }

            public delegate void CancelButtonDeactivation();
            /// <summary>Event provided for extensibility of default <see cref="InputAction">InputActions</see>. Intended to be used when the Cancel Button represents an "on / off" toggle, with one
            /// <see cref="InputAction" /> toggling it on (and therefore firing <see cref="OnCancelButtonActivation" />) and a different <see cref="InputAction" /> toggling it off (and thus firing
            /// <see cref="OnCancelButtonDeactivation" />).</summary>
            /// <seealso cref="M:Immerseum.VRSimulator.EventManager.deactivateCancelButton">Event Invocation: EventManager.deactivateCancelButton</seealso>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnCancelButtonDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnCancelButtonDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event CancelButtonDeactivation OnCancelButtonDeactivation;
            /// <summary>Fires the <strong><see cref="OnCancelButtonDeactivation">OnCancelButtonDeactivation</see></strong> event.</summary>
            public static void deactivateCancelButton() {
                InputActionManager.setCancelButtonActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Cancel Button: DEACTIVATED");
                }
                if (OnCancelButtonDeactivation != null) {
                    OnCancelButtonDeactivation();
                }
            }

            public delegate void LeftBumperDeactivation();
            /// <summary>Event provided for extensibility of default <see cref="InputAction">InputActions</see>. Intended to be used when the Left Bumper represents an "on / off" toggle, with one
            /// <see cref="InputAction" /> toggling it on (and therefore firing <see cref="OnLeftBumperActivation" />) and a different <see cref="InputAction" /> toggling it off (and thus firing
            /// <see cref="OnLeftBumperDeactivation" />).</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnLeftBumperDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnLeftBumperDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event LeftBumperDeactivation OnLeftBumperDeactivation;
            /// <summary>Fires the <strong><see cref="OnLeftBumperDeactivation">OnLeftBumperDeactivation</see></strong> event.</summary>
            public static void deactivateLeftBumper() {
                InputActionManager.setLeftBumperActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Left Bumper: DEACTIVATED");
                }
                if (OnLeftBumperDeactivation != null) {
                    OnLeftBumperDeactivation();
                }
            }

            public delegate void RightBumperDeactivation();
            /// <summary>Event provided for extensibility of default <see cref="InputAction">InputActions</see>. Intended to be used when the button represents an "on / off" toggle, with one
            /// <see cref="InputAction" /> toggling it on (and therefore firing <see cref="OnRightBumperActivation" />) and a different <see cref="InputAction" /> toggling it off (and thus firing
            /// <see cref="OnRightBumperDeactivation" />).</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnRightBumperDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnRightBumperDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event RightBumperDeactivation OnRightBumperDeactivation;
            /// <summary>Fires the <strong><see cref="OnRightBumperDeactivation">OnRightBumperDeactivation</see></strong> event.</summary>
            public static void deactivateRightBumper() {
                InputActionManager.setRightBumperActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Right Bumper: DEACTIVATED");
                }
                if (OnRightBumperDeactivation != null) {
                    OnRightBumperDeactivation();
                }
            }

            public delegate void LeftThumbstickClickDeactivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleLeftThumbstickClick</strong><see cref="InputAction" /> has been received and
            /// <strong>InputActionManager.isLeftThumbstickClickActivated</strong> is <strong>true</strong>.</para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnLeftThumbstickClickDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnLeftThumbstickClickDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event LeftThumbstickClickDeactivation OnLeftThumbstickClickDeactivation;
            /// <summary>Fires the <strong><see cref="OnLeftThumbstickClickDeactivation">OnLeftThumbstickClickDeactivation</see></strong> event.</summary>
            public static void deactivateLeftThumbstickClick() {
                InputActionManager.setLeftThumbstickClickActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Left Thumbstick Click: DEACTIVATED");
                }
                if (OnLeftThumbstickClickDeactivation != null) {
                    OnLeftThumbstickClickDeactivation();
                }
            }

            public delegate void RightThumbstickClickDeactivation();
            /// <summary>
            ///   <para>If default InputActions are enabled, fired when the default <strong>toggleRightThumbstickClick</strong><see cref="InputAction" /> has been received and
            /// <strong>InputActionManager.isRightThumbstickClickActivated</strong> is <strong>true</strong>.</para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnRightThumbstickClickDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnRightThumbstickClickDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event RightThumbstickClickDeactivation OnRightThumbstickClickDeactivation;
            /// <summary>Fires the <strong><see cref="OnRightThumbstickClickDeactivation">OnRightThumbstickClickDeactivation</see></strong> event.</summary>
            public static void deactivateRightThumbstickClick() {
                InputActionManager.setRightThumbstickClickActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Right Thumbstick Click: DEACTIVATED");
                }
                if (OnRightThumbstickClickDeactivation != null) {
                    OnRightThumbstickClickDeactivation();
                }
            }

            public delegate void PauseButtonDeactivation();
            /// <summary>Event provided for extensibility of default <see cref="InputAction">InputActions</see>. Intended to be used when the Pause Button represents an "on / off" toggle, with one
            /// <see cref="InputAction" /> toggling it on (and therefore firing <see cref="OnPauseButtonActivation" />) and a different <see cref="InputAction" /> toggling it off (and thus firing
            /// <see cref="OnPauseButtonDeactivation" />).</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnPauseButtonDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnPauseButtonDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event PauseButtonDeactivation OnPauseButtonDeactivation;
            /// <summary>Fires the <strong><see cref="OnPauseButtonDeactivation">OnPauseButtonDeactivation</see></strong> event.</summary>
            public static void deactivatePauseButton() {
                InputActionManager.setPauseButtonActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Pause Button: DEACTIVATED");
                }
                if (OnPauseButtonDeactivation != null) {
                    OnPauseButtonDeactivation();
                }
            }

            public delegate void SecondaryButtonDeactivation();
            /// <summary>Event provided for extensibility of default <see cref="InputAction">InputActions</see>. Intended to be used when the button represents an "on / off" toggle, with one
            /// <see cref="InputAction" /> toggling it on (and therefore firing <see cref="OnSecondaryButtonActivation" />) and a different <see cref="InputAction" /> toggling it off (and thus firing
            /// <see cref="OnSecondaryButtonDeactivation" />).</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnSecondaryButtonDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnSecondaryButtonDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event SecondaryButtonDeactivation OnSecondaryButtonDeactivation;
            /// <summary>Fires the <strong><see cref="OnSecondaryButtonDeactivation">OnSecondaryButtonDeactivation</see></strong> event.</summary>
            public static void deactivateSecondaryButton() {
                InputActionManager.setSecondaryButtonActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Secondary Button: DEACTIVATED");
                }
                if (OnSecondaryButtonDeactivation != null) {
                    OnSecondaryButtonDeactivation();
                }
            }

            public delegate void SelectionButtonDeactivation();
            /// <summary>Event provided for extensibility of default <see cref="InputAction">InputActions</see>. Intended to be used when the button represents an "on / off" toggle, with one
            /// <see cref="InputAction" /> toggling it on (and therefore firing <see cref="OnSelectionButtonActivation" />) and a different <see cref="InputAction" /> toggling it off (and thus firing
            /// <see cref="OnSelectionButtonDeactivation" />).</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnSelectionButtonDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnSelectionButtonDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event SelectionButtonDeactivation OnSelectionButtonDeactivation;
            /// <summary>Fires the <strong><see cref="OnSelectionButtonDeactivation">OnSelectionButtonDeactivation</see></strong> event.</summary>
            public static void deactivateSelectionButton() {
                InputActionManager.setSelectionButtonActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Selection Button: DEACTIVATED");
                }
                if (OnSelectionButtonDeactivation != null) {
                    OnSelectionButtonDeactivation();
                }
            }

            public delegate void TertiaryButtonDeactivation();
            /// <summary>Event provided for extensibility of default <see cref="InputAction">InputActions</see>. Intended to be used when the button represents an "on / off" toggle, with one
            /// <see cref="InputAction" /> toggling it on (and therefore firing <see cref="OnTertiaryButtonActivation" />) and a different <see cref="InputAction" /> toggling it off (and thus firing
            /// <see cref="OnTertiaryButtonDeactivation" />).</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnTertiaryButtonDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnTertiaryButtonDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event TertiaryButtonDeactivation OnTertiaryButtonDeactivation;
            /// <summary>Fires the <strong><see cref="OnTertiaryButtonDeactivation">OnTertiaryButtonDeactivation</see></strong> event.</summary>
            public static void deactivateTertiaryButton() {
                InputActionManager.setTertiaryButtonActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Tertiary Button: DEACTIVATED");
                }
                if (OnTertiaryButtonDeactivation != null) {
                    OnTertiaryButtonDeactivation();
                }
            }

            public delegate void ViewButtonDeactivation();
            /// <summary>Event provided for extensibility of default <see cref="InputAction">InputActions</see>. Intended to be used when the button represents an "on / off" toggle, with one
            /// <see cref="InputAction" /> toggling it on (and therefore firing <see cref="OnViewButtonActivation" />) and a different <see cref="InputAction" /> toggling it off (and thus firing
            /// <see cref="OnViewButtonDeactivation" />).</summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnViewButtonDeactivation += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnViewButtonDeactivation -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener() {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event ViewButtonDeactivation OnViewButtonDeactivation;
            /// <summary>Fires the <strong><see cref="OnViewButtonDeactivation">OnViewButtonDeactivation</see></strong> event.</summary>
            public static void deactivateViewButton() {
                InputActionManager.setViewButtonActivated(false);
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] View Button: DEACTIVATED");
                }
                if (OnViewButtonDeactivation != null) {
                    OnViewButtonDeactivation();
                }
            }

            public delegate void PitchRotationEndAction(InputAction inputAction);
            /// <summary>
            ///   <para>If default <see cref="InputAction">InputActions</see> are enabled, then this event fires whenever the user's avatar has completed its rotation along the Pitch Axis. This
            /// event is invoked via the <strong><see cref="endPitchRotation">EventManager.endPitchRotation</see></strong> method, which is itself called at the conclusion of the primary
            /// <strong><see cref="OnPitchRotationStart" /></strong> listener.</para>
            ///   <innovasys:widget type="Tip Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>If you have many separate listeners all listening for a particular <see cref="OnPitchRotationStart" />, it may be easy to lose track of which listener should
            ///         invoke <strong><see cref="endPitchRotation">EventManager.endPitchRotation</see></strong>.</para>
            ///       <para>As a general rule of thumb, this event should be invoked by the "main" method that deals with the pitch axis movement. "Main" in your case may be
            ///         the method that does the most, or the method that takes the longest, or the method that deals directly with the camera.</para>
            ///       <para>Assuming default Input Actions are enabled, then the <see cref="endPitchRotation" /> method will be called and the <strong>OnPitchRotationEnd</strong> event
            ///         fired when the camera rotation initiated by <see cref="OnPitchRotationStart" /> has finished.</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnPitchRotationEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnPitchRotationEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event PitchRotationEndAction OnPitchRotationEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnPitchRotationEnd" /></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that initiated rotation.</param>
            public static void endPitchRotation(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Pitch Rotation Ended");
                }
                if (OnPitchRotationEnd != null) {
                    OnPitchRotationEnd(inputAction);
                }
            }

            public delegate void YawRotationEndAction(InputAction inputAction);
            /// <summary>
            ///   <para>If default <see cref="InputAction">InputActions</see> are enabled, then this event fires whenever the user's avatar has completed its rotation along the Yaw Axis. This
            /// event is invoked via the <strong><see cref="endYawRotation">EventManager.endYawRotation</see></strong> method, which is itself called at the conclusion of the primary
            /// <strong><see cref="OnYawRotationStart" /></strong> listener.</para>
            ///   <innovasys:widget type="Tip Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>If you have many separate listeners all listening for a particular <see cref="OnYawRotationStart" />, it may be easy to lose track of which listener should
            ///         invoke <strong><see cref="endYawRotation">EventManager.endYawRotation</see></strong>.</para>
            ///       <para>As a general rule of thumb, this event should be invoked by the "main" method that deals with the yaw axis movement. "Main" in your case may be the
            ///         method that does the most, or the method that takes the longest, or the method that deals directly with the user's avatar.</para>
            ///       <para>Assuming default Input Actions are enabled, then the <see cref="endYawRotation" /> method will be called and the <strong>OnYawRotationEnd</strong> event fired
            ///         when the camera rotation initiated by <see cref="OnYawRotationStart" /> has finished.</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            ///   <para></para>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnYawRotationEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnYawRotationEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event YawRotationEndAction OnYawRotationEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnYawRotationEnd" /></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that initiated rotation.</param>
            public static void endYawRotation(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Yaw Rotation Ended");
                }
                if (OnYawRotationEnd != null) {
                    OnYawRotationEnd(inputAction);
                }
            }

            public delegate void XAxisMovementEndAction(InputAction inputAction);
            /// <summary>
            ///   <para>If default <see cref="InputAction">InputActions</see> are enabled, then this event fires whenever the user's avatar has completed its movement along the X-Axis. This event
            /// is invoked via the <strong><see cref="endXAxisMovement">EventManager.endXAxisMovement</see></strong> method, which is itself called at the conclusion of the primary
            /// <strong><see cref="OnXAxisMovementStart" /></strong> listener.</para>
            ///   <innovasys:widget type="Tip Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>If you have many separate listeners all listening for a particular <see cref="OnXAxisMovementStart" />, it may be easy to lose track of which listener should
            ///         invoke <strong><see cref="endXAxisMovement">EventManager.endXAxisMovement</see></strong>.</para>
            ///       <para>As a general rule of thumb, this event should be invoked by the "main" method that deals with the x-axis movement. "Main" in your case may be the
            ///         method that does the most, or the method that takes the longest, or the method that deals directly with the user's avatar.</para>
            ///       <para>Assuming default Input Actions are enabled, then the <see cref="endXAxisMovement" /> method will be called and the <strong>OnXAxisMovementEnd</strong> event
            ///         fired when the user's movement initiated by <see cref="OnXAxisMovementStart" /> has finished.</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnXAxisMovementEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnXAxisMovementEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event XAxisMovementEndAction OnXAxisMovementEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnXAxisMovementEnd">OnXAxisMovementEnd</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that initiated movement along the X-Axis.</param>
            public static void endXAxisMovement(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] X-Axis Movement Ended");
                }
                if (OnXAxisMovementEnd != null) {
                    OnXAxisMovementEnd(inputAction);
                }
            }

            public delegate void ZAxisMovementEndAction(InputAction inputAction);
            /// <summary>
            ///   <para>If default <see cref="InputAction">InputActions</see> are enabled, then this event fires whenever the user's avatar has completed its movement along the Z-Axis. This event
            /// is invoked via the <strong><see cref="endZAxisMovement">EventManager.endZAxisMovement</see></strong> method, which is itself called at the conclusion of the primary
            /// <strong><see cref="OnZAxisMovementStart" /></strong> listener.</para>
            ///   <innovasys:widget type="Tip Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>If you have many separate listeners all listening for a particular <see cref="OnZAxisMovementStart" />, it may be easy to lose track of which listener should
            ///         invoke <strong><see cref="endZAxisMovement">EventManager.endZAxisMovement</see></strong>.</para>
            ///       <para>As a general rule of thumb, this event should be invoked by the "main" method that deals with the z-axis movement. "Main" in your case may be the
            ///         method that does the most, or the method that takes the longest, or the method that deals directly with the user's avatar.</para>
            ///       <para>Assuming default Input Actions are enabled, then the <see cref="endZAxisMovement" /> method will be called and the <strong>OnZAxisMovementEnd</strong> event
            ///         fired when the user's movement initiated by <see cref="OnZAxisMovementStart" /> has finished.</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <example>
            ///   <code title="Example Listener" description="" lang="C#">
            /// public class myClass : MonoBehaviour {
            ///     void OnEnable() {
            ///         EventManager.OnZAxisMovementEnd += myCustomListener;
            ///     }
            ///     
            ///     void OnDisable() {
            ///         EventManager.OnZAxisMovementEnd -= myCustomListener;
            ///     }
            ///     
            ///     void myCustomListener(InputAction action) {
            ///         // Custom listener logic goes here.
            ///     }
            /// }</code>
            /// </example>
            public static event ZAxisMovementEndAction OnZAxisMovementEnd;
            /// <summary>
            ///   <para>Fires the <strong><see cref="OnXAxisMovementEnd">OnZAxisMovementEnd</see></strong> event.</para>
            ///   <innovasys:widget type="Warning Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
            ///     <innovasys:widgetproperty layout="block" name="Content">
            ///       <para>Listeners are expected to have a return type of <strong>void</strong> and to accept the same parameters as this method (see below).</para>
            ///     </innovasys:widgetproperty>
            ///   </innovasys:widget>
            /// </summary>
            /// <param name="inputAction">The <see cref="InputAction">InputAction</see> that initiated movement along the Z-Axis.</param>
            public static void endZAxisMovement(InputAction inputAction) {
                if (HMDSimulator.logInputActions) {
                    Debug.Log("[ImmerseumSDK] Z-Axis Movement Ended");
                }
                if (OnZAxisMovementEnd != null) {
                    OnZAxisMovementEnd(inputAction);
                }
            }
        }
    }
}
